Index: privilegeService/src/main/java/demo/Controller/PrivilegeController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package demo.Controller;\r\n\r\nimport demo.Service.NewUserService;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.validation.BindingResult;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport util.ResponseCode;\r\nimport util.ReturnObject;\r\n\r\n/**\r\n * @author chei1\r\n */\r\n@RestController\r\n@RequestMapping(value = \"/privilege\", produces = \"application/json;charset=UTF-8\")\r\npublic class PrivilegeController {\r\n    @Autowired\r\n    NewUserService newUserService;\r\n\r\n    //@Audit // 需要认证\r\n    @PutMapping(\"shops/{did}/adminusers/{id}/approve\")\r\n    public Object approveUser(@PathVariable Long id, @PathVariable Long did, BindingResult bindingResult, @RequestBody Boolean approve, @Depart Long shopid) {\r\n        //logger.debug(\"approveUser: did = \"+ did+\" userid: id = \"+ id+\" opinion: \"+approve);\r\n        ReturnObject returnObject=null;\r\n        if(did==0|| did.equals(shopid))\r\n        {\r\n            returnObject=newUserService.approveUser(approve,id);\r\n        }\r\n        else\r\n        {\r\n            //logger.error(\"approveUser: 无权限查看此部门的用户 did=\" + did);\r\n            return new ReturnObject<>(ResponseCode.FIELD_NOTVALID);\r\n        }\r\n        return returnObject;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- privilegeService/src/main/java/demo/Controller/PrivilegeController.java	(revision 6c7e62467dde09c0d484b1d3aa1be19cd71dae20)
+++ privilegeService/src/main/java/demo/Controller/PrivilegeController.java	(date 1606800900259)
@@ -6,6 +6,29 @@
 import org.springframework.web.bind.annotation.*;
 import util.ResponseCode;
 import util.ReturnObject;
+import cn.edu.xmu.ooad.annotation.Depart;
+import cn.edu.xmu.ooad.annotation.LoginUser;
+import cn.edu.xmu.ooad.model.VoObject;
+import cn.edu.xmu.ooad.util.Common;
+import cn.edu.xmu.ooad.util.ResponseCode;
+import cn.edu.xmu.ooad.util.ReturnObject;
+import com.github.pagehelper.PageInfo;
+import demo.model.bo.User;
+import demo.model.vo.PrivilegeVo;
+import io.swagger.annotations.*;
+import cn.edu.xmu.ooad.annotation.Audit;
+import org.springframework.http.HttpStatus;
+import org.springframework.transaction.annotation.Transactional;
+import org.springframework.validation.BindingResult;
+import org.springframework.validation.annotation.Validated;
+import org.springframework.web.bind.annotation.*;
+import reactor.core.publisher.Flux;
+import reactor.core.publisher.Mono;
+import springfox.documentation.annotations.ApiIgnore;
+
+import javax.servlet.http.HttpServletResponse;
+import java.time.LocalDateTime;
+import java.util.List;
 
 /**
  * @author chei1
@@ -13,9 +36,369 @@
 @RestController
 @RequestMapping(value = "/privilege", produces = "application/json;charset=UTF-8")
 public class PrivilegeController {
+
+    private final PrivilegeRepository privilegeRepository;
+
+    public PrivilegeController(PrivilegeRepository privilegeRepository) {
+        this.privilegeRepository = privilegeRepository;
+    }
+
+
+    /***
+     * 取消用户权限
+     * @param id 用户id
+     * @param did 部门id
+     * @return
+     */
+    @ApiOperation(value = "取消用户权限")
+    @ApiImplicitParams({
+            @ApiImplicitParam(paramType = "header", dataType = "String", name = "authorization", value = "Token", required = true),
+            @ApiImplicitParam(name="id", value="角色id", required = true, dataType="Integer", paramType="path"),
+            @ApiImplicitParam(name="did", value="部门id", required = true, dataType="Integer", paramType="path")
     @Autowired
     NewUserService newUserService;
 
+    })
+    @ApiResponses({
+            @ApiResponse(code = 0, message = "成功"),
+            @ApiResponse(code = 504, message = "操作id不存在")
+    })
+    @Audit
+    @DeleteMapping("/shops/{did}/adminuserroles/{id}")
+    public Mono<Void> revokeRole(@PathVariable Long did, @PathVariable Long userid, @PathVariable Long roleid){
+        return privilegeRepository.deleteById(id);
+    }
+
+    /***
+     * 赋予用户权限
+     * @param userid 用户id
+     * @param roleid 角色id
+     * @param createid 创建者id
+     * @param did 部门id
+     * @return
+     */
+    @ApiOperation(value = "赋予用户权限")
+    @ApiImplicitParams({
+            @ApiImplicitParam(paramType = "header", dataType = "String", name = "authorization", value = "Token", required = true),
+            @ApiImplicitParam(name="userid", value="用户id", required = true, dataType="Integer", paramType="path"),
+            @ApiImplicitParam(name="roleid", value="角色id", required = true, dataType="Integer", paramType="path"),
+            @ApiImplicitParam(name="did", value="部门id", required = true, dataType="Integer", paramType="path")
+    })
+    @ApiResponses({
+            @ApiResponse(code = 0, message = "成功"),
+            @ApiResponse(code = 504, message = "操作id不存在")
+    })
+    @Audit
+    @PostMapping("/shops/{did}/adminusers/{userid}/roles/{roleid}")
+    public Object assignRole(@LoginUser Long createid, @PathVariable Long did, @PathVariable Long userid, @PathVariable Long roleid){
+
+        return null;
+
+    }
+
+    /***
+     * 获得自己角色信息
+     * @author Xianwei Wang
+     * @return
+     */
+    @ApiOperation(value = "获得自己角色信息")
+    @ApiImplicitParams({
+            @ApiImplicitParam(paramType = "header", dataType = "String", name = "authorization", value = "Token", required = true),
+    })
+    @ApiResponses({
+            @ApiResponse(code = 0, message = "成功"),
+
+    })
+    @Audit
+    @GetMapping("/adminusers/self/roles")
+    public Object getUserSelfRole(@LoginUser Long id){
+        ReturnObject<List> returnObject =  userService.getSelfUserRoles(id);
+        return Common.getListRetObject(returnObject);
+    }
+
+    /***
+     * 获得所有人角色信息
+     * @param id 用户id
+     * @param did 部门id
+     * @return
+     */
+    @ApiOperation(value = "获得所有人角色信息")
+    @ApiImplicitParams({
+            @ApiImplicitParam(paramType = "header", dataType = "String", name = "authorization", value = "Token", required = true),
+            @ApiImplicitParam(name="id", value="用户id", required = true, dataType="int", paramType="path"),
+            @ApiImplicitParam(name="did", value="部门id", required = true, dataType="int", paramType="path")
+    })
+    @ApiResponses({
+            @ApiResponse(code = 0, message = "成功"),
+    })
+    @Audit
+    @GetMapping("/shops/{did}/adminusers/{id}/roles")
+    public Object getSelfRole(@PathVariable Long did, @PathVariable Long id){
+        ReturnObject<List> returnObject =  userService.getUserRoles(id, did);
+        if (returnObject.getCode() == ResponseCode.OK) {
+            return Common.getListRetObject(returnObject);
+        } else {
+            return Common.decorateReturnObject(returnObject);
+        }
+
+    }
+
+    /**
+     * 获得所有权限
+     * @return Object
+     * createdBy Ming Qiu 2020/11/03 23:57
+     */
+    @ApiOperation(value = "获得所有权限")
+    @ApiImplicitParams({
+            @ApiImplicitParam(name="authorization", value="Token", required = true, dataType="String", paramType="header")
+    })
+    @ApiResponses({
+            @ApiResponse(code = 0, message = "成功"),
+    })
+    @Audit
+    @GetMapping("privileges")
+    public Object getAllPrivs(@RequestParam(required = false) Integer page, @RequestParam(required = false) Integer pageSize){
+
+        logger.debug("getAllPrivs: page = "+ page +"  pageSize ="+pageSize);
+
+        page = (page == null)?1:page;
+        pageSize = (pageSize == null)?10:pageSize;
+
+        logger.debug("getAllPrivs: page = "+ page +"  pageSize ="+pageSize);
+        ReturnObject<PageInfo<VoObject>> returnObject =  userService.findAllPrivs(page, pageSize);
+        return Common.getPageRetObject(returnObject);
+    }
+
+    /**
+     * 修改权限
+     * @param id : 权限id
+     * @return Object
+     * createdBy Ming Qiu 2020/11/03 23:57
+     */
+    @ApiOperation(value = "修改权限信息")
+    @ApiImplicitParams({
+            @ApiImplicitParam(name="authorization", value="Token", required = true, dataType="String", paramType="header"),
+            @ApiImplicitParam(name="id", required = true, dataType="String", paramType="path")
+    })
+    @ApiResponses({
+            @ApiResponse(code = 0, message = "成功"),
+    })
+    @Audit
+    @PutMapping("privileges/{id}")
+    public Object changePriv(@PathVariable Long id, @Validated @RequestBody PrivilegeVo vo, BindingResult bindingResult, @LoginUser Long userId, @Depart Long departId,
+                             HttpServletResponse httpServletResponse){
+        logger.debug("changePriv: id = "+ id +" vo" + vo);
+        logger.debug("getAllPrivs: userId = " + userId +" departId = "+departId);
+        /* 处理参数校验错误 */
+        Object o = Common.processFieldErrors(bindingResult, httpServletResponse);
+        if(o != null){
+            return o;
+        }
+        ReturnObject<VoObject> returnObject = userService.changePriv(id, vo);
+
+        if (returnObject.getCode() == ResponseCode.OK) {
+            return Common.getRetObject(returnObject);
+        } else {
+            return Common.decorateReturnObject(returnObject);
+        }
+    }
+
+    /**
+     * auth007: 查询某一用户权限
+     * @author yue hao
+     * @param id
+     * @return Object
+     */
+    @ApiOperation(value = "获得某一用户的权限")
+    @ApiImplicitParams({
+            @ApiImplicitParam(name="authorization", value="Token", required = true, dataType="String", paramType="header"),
+            @ApiImplicitParam(name="id", required = true, dataType="String", paramType="path"),
+            @ApiImplicitParam(name="did", required = true, dataType="String", paramType="path"),
+    })
+    @ApiResponses({
+            @ApiResponse(code = 0, message = "成功"),
+            @ApiResponse(code = 504, message = "操作id不存在")
+    })
+    @Audit // 需要认证
+    @GetMapping("/shops/{did}/adminusers/{id}/privileges")
+    public Object getPrivsByUserId(@PathVariable Long id, @PathVariable Long did){
+        ReturnObject<List> returnObject =  userService.findPrivsByUserId(id,did);
+        if (returnObject.getCode() == ResponseCode.OK) {
+            return Common.getListRetObject(returnObject);
+        } else {
+            return Common.decorateReturnObject(returnObject);
+        }
+    }
+
+    /**
+     * @author XQChen
+     * @date Created in 2020/11/8 0:33
+     **/
+    @ApiOperation(value = "auth003:查看自己信息",  produces="application/json")
+    @ApiImplicitParams({
+            @ApiImplicitParam(paramType = "header", dataType = "String", name = "authorization", value ="用户token", required = true)
+    })
+    @ApiResponses({
+    })
+    @Audit
+    @GetMapping("adminusers")
+    public Object getUserSelf(@LoginUser Long userId) {
+        logger.debug("getUserSelf userId:" + userId);
+
+        Object returnObject;
+
+        ReturnObject<VoObject> user =  userService.findUserById(userId);
+        logger.debug("finderSelf: user = " + user.getData() + " code = " + user.getCode());
+
+        returnObject = Common.getRetObject(user);
+
+        return returnObject;
+    }
+
+    /**
+     * @author XQChen
+     * @date Created in 2020/11/8 0:33
+     **/
+    @Audit
+    @ApiOperation(value = "auth003: 查看任意用户信息",  produces="application/json")
+    @ApiImplicitParams({
+            @ApiImplicitParam(paramType = "header", dataType = "String",  name = "authorization", value ="用户token", required = true),
+            @ApiImplicitParam(paramType = "path",   dataType = "Integer", name = "id",            value ="用户id",    required = true)
+    })
+    @ApiResponses({
+    })
+    @GetMapping("adminusers/{id}")
+    public Object getUserById(@PathVariable("id") Long id) {
+
+        Object returnObject = null;
+
+        ReturnObject<VoObject> user = userService.findUserById(id);
+        logger.debug("findUserById: user = " + user.getData() + " code = " + user.getCode());
+
+        if (!user.getCode().equals(ResponseCode.RESOURCE_ID_NOTEXIST)) {
+            returnObject = Common.getRetObject(user);
+        } else {
+            returnObject = Common.getNullRetObj(new ReturnObject<>(user.getCode(), user.getErrmsg()), httpServletResponse);
+        }
+
+        return returnObject;
+    }
+
+    /**
+     * @author XQChen
+     * @date Created in 2020/11/8 0:33
+     **/
+    @Audit
+    @ApiOperation(value = "auth003: 查询用户信息",  produces="application/json")
+    @ApiImplicitParams({
+            @ApiImplicitParam(paramType = "header", dataType = "String",  name = "authorization", value ="用户token", required = true),
+            @ApiImplicitParam(paramType = "query",  dataType = "String",  name = "userName",      value ="用户名",    required = false),
+            @ApiImplicitParam(paramType = "query",  dataType = "String",  name = "mobile",        value ="电话号码",  required = false),
+            @ApiImplicitParam(paramType = "query",  dataType = "Integer", name = "page",          value ="页码",      required = true),
+            @ApiImplicitParam(paramType = "query",  dataType = "Integer", name = "pagesize",      value ="每页数目",  required = true)
+    })
+    @ApiResponses({
+    })
+    @GetMapping("adminusers/all")
+    public Object findAllUser(
+            @RequestParam  String  userName,
+            @RequestParam  String  mobile,
+            @RequestParam(required = false, defaultValue = "1")  Integer page,
+            @RequestParam(required = false, defaultValue = "10")  Integer pagesize) {
+
+        Object object = null;
+
+        if(page <= 0 || pagesize <= 0) {
+            object = Common.getNullRetObj(new ReturnObject<>(ResponseCode.FIELD_NOTVALID), httpServletResponse);
+        } else {
+            ReturnObject<PageInfo<VoObject>> returnObject = userService.findAllUsers(userName, mobile, page, pagesize);
+            logger.debug("findUserById: getUsers = " + returnObject);
+            object = Common.getPageRetObject(returnObject);
+        }
+
+        return object;
+    }
+
+    /**
+     * 分页查询所有角色
+     *
+     * @author 24320182203281 王纬策
+     * @param page 页数
+     * @param pageSize 每页大小
+     * @return Object 角色分页查询结果
+     * createdBy 王纬策 2020/11/04 13:57
+     * modifiedBy 王纬策 2020/11/7 19:20
+     */
+    @ApiOperation(value = "查询角色", produces = "application/json")
+    @ApiImplicitParams({
+            @ApiImplicitParam(paramType = "header", dataType = "String", name = "authorization", value = "Token", required = true),
+            @ApiImplicitParam(paramType = "path", dataType = "int", name = "did", value = "部门id", required = true),
+            @ApiImplicitParam(paramType = "query", dataType = "int", name = "page", value = "页码", required = false),
+            @ApiImplicitParam(paramType = "query", dataType = "int", name = "pageSize", value = "每页数目", required = false)
+    })
+    @ApiResponses({
+            @ApiResponse(code = 0, message = "成功"),
+    })
+    @Audit
+    @GetMapping("/shops/{did}/roles")
+    public Object selectAllRoles(@LoginUser @ApiIgnore @RequestParam(required = false) Long userId,
+                                 @Depart @ApiIgnore @RequestParam(required = false) Long departId,
+                                 @PathVariable("did") Long did,
+                                 @RequestParam(required = false, defaultValue = "1") Integer page,
+                                 @RequestParam(required = false, defaultValue = "10") Integer pageSize) {
+        logger.debug("selectAllRoles: page = "+ page +"  pageSize ="+pageSize);
+        if(did.equals(departId)){
+            ReturnObject<PageInfo<VoObject>> returnObject =  roleService.selectAllRoles(departId, page, pageSize);
+            return Common.getPageRetObject(returnObject);
+        }
+        else{
+            return Common.getNullRetObj(new ReturnObject<>(ResponseCode.FIELD_NOTVALID, String.format("部门id不匹配：" + did)), httpServletResponse);
+        }
+    }
+
+    /**
+     * 新增一个角色
+     *
+     * @author 24320182203281 王纬策
+     * @param vo 角色视图
+     * @param bindingResult 校验错误
+     * @param userId 当前用户id
+     * @return Object 角色返回视图
+     * createdBy 王纬策 2020/11/04 13:57
+     * modifiedBy 王纬策 2020/11/7 19:20
+     */
+    @ApiOperation(value = "新增角色", produces = "application/json")
+    @ApiImplicitParams({
+            @ApiImplicitParam(paramType = "header", dataType = "String", name = "authorization", value = "Token", required = true),
+            @ApiImplicitParam(paramType = "body", dataType = "RoleVo", name = "vo", value = "可修改的用户信息", required = true)
+    })
+    @ApiResponses({
+            @ApiResponse(code = 0, message = "成功"),
+            @ApiResponse(code = 736, message = "角色名已存在"),
+    })
+    @Audit
+    @PostMapping("/roles")
+    public Object insertRole(@Validated @RequestBody RoleVo vo, BindingResult bindingResult,
+                             @LoginUser @ApiIgnore @RequestParam(required = false) Long userId,
+                             @Depart @ApiIgnore @RequestParam(required = false) Long departId) {
+        logger.debug("insert role by userId:" + userId);
+        //校验前端数据
+        Object returnObject = Common.processFieldErrors(bindingResult, httpServletResponse);
+        if (null != returnObject) {
+            logger.debug("validate fail");
+            return returnObject;
+        }
+        Role role = vo.createRole();
+        role.setCreatorId(userId);
+        role.setDepartId(departId);
+        role.setGmtCreate(LocalDateTime.now());
+        ReturnObject retObject = roleService.insertRole(role);
+        if (retObject.getData() != null) {
+            httpServletResponse.setStatus(HttpStatus.CREATED.value());
+            return Common.getRetObject(retObject);
+        } else {
+            return Common.getNullRetObj(new ReturnObject<>(retObject.getCode(), retObject.getErrmsg()), httpServletResponse);
+        }
     //@Audit // 需要认证
     @PutMapping("shops/{did}/adminusers/{id}/approve")
     public Object approveUser(@PathVariable Long id, @PathVariable Long did, BindingResult bindingResult, @RequestBody Boolean approve, @Depart Long shopid) {
@@ -32,4 +415,5 @@
         }
         return returnObject;
     }
+
 }
